{	
	"Header": {
		"scope": "raku",
		"prefix": "header",
		 "body": [
			 "#======================================================#",
			 "# Author: Dr Suman Khanal",
			 "# Date creation: $CURRENT_DAY_NAME $CURRENT_MONTH_NAME_SHORT $CURRENT_DATE $CURRENT_YEAR, $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
			 "# ~: ${1:Description}",
			 "# File: $TM_FILENAME",
			 "#======================================================#",
			 "$0"
			],
		 "description": "Header in a script with author, date, filename"
	},
	
		
	"Single line comment": {
		"scope": "raku",
		"prefix": "slcom",
		"body": [
			"# $1"
		],
		"description": "Single line comment"
	},
	
	"Start new block": {
		"scope": "raku",
		"prefix": "para",
		"body": [
			"#=====================================================================#",
			"$1"
		],
		"description": "Start new block"
	},

	
	"Multiline comment": {
		"scope": "raku",
		"prefix": "mlcom",
		"body": [
			"#`[",
			"$1",
			"]"
		],
		"description": "Multiline comment"
	},
		
		
		
		
	"New variable": {
		"scope": "raku",
		"prefix": "var",
		"body": [
			"my ${1:name} = ${2:value};",
			"$0"
		],
		"description": "variable"
	},
	
	"Printing with newline": {
		"scope": "raku",
		"prefix": "say",
		"body": [
			"say $1;"
		],
		"description": "Printing with newline"
	},
	
	"Print": {
		"scope": "raku",
		"prefix": "print",
		"body": [
			"print $1;"
		],
		"description": "Writes the given text to the handle without newline, coercing any non-Str objects to Str by calling .Str method on them"
	},

	"For loop": {
		"scope": "raku",
		"prefix": "for",
		"body": [
			"for ${1:iterable} {",
				"\t${2:block} ;",
				"}",
				"$0"
		],
		"description": "For loop in raku"
	},
	
	
	"Forwhen": {
		"scope": "raku",
		"prefix": "forwhen",
		"body": [
			"for $1 {",
				"\twhen $2 {$3}",
				"\twhen $4 {$5}",
				"\tdefault {$6}",
				"}",
				"$0"		
		],
		"description": "For loop with when body, similar to given"
	},
	
	"Forp loop": {
		"scope": "raku",
		"prefix": "forp",
		"body": [
			"for $1 -> $2 {",
				"\t${3:block} ;",
				"}",
				"$0"
		],
		"description": "For loop with pointy block"
	},
	
	"Conditional1": {
		"scope": "raku",
		"prefix": "if",
		"body": [
			"if ${1:condition} {",
				"\t${2:block};",
				"} $0"
		],
		"description": "If conditional"
	},
	
	"Conditional2": {
		"scope": "raku",
		"prefix": "elsif",
		"body": [
			"elsif ${1:condition} {",
				"\t${2:block};",
				"} $0"
		],
		"description": "Else if branch"
	},
	
	"Conditional3": {
		"scope": "raku",
		"prefix": "else",
		"body": [
			"else {",
				"\t${1:block};",
				"};",
				"$0"
		],
		"description": "Else branch"
	},
	
	"While": {
		"scope": "raku",
		"prefix": "while",
		"body": [
			"while ${1:condition} {",
			"\t${2:block of code};",
			"}",
			"$0"		
		],
		"description": "while statement"
	},
	
	
	"Function": {
		"scope": "raku",
		"prefix": "sub",
		"body": [
			"sub ${1:name}(${2:parameters}) {",
			"\t${3:body};",
			"}",
			"$0"
		],
		"description": "subroutines in raku called as functions in other langs"
	},
	
	
	"Function2": {
		"scope": "raku",
		"prefix": "subexp",
		"body": [
			"sub ${1:name}(${2:parameters}) is export {",
			"\t${3:body};",
			"}",
			"$0"
		],
		"description": "subroutine to export from a module"
	},
	
	"Class": {
		"scope": "raku",
		"prefix": "cls",
		"body": [
			"class ${1:name} {",
				"\thas ${2:attribute};",
				"\thas ${3:attribute};",
				"\tmethod ${4:behavior}(${5:parameters}) {",
				"\t\t${6:body};",
				"\t}$7",
				"}",
				"$0"
		],
		"description": "Class definition"
	},
	
	"Method": {
		"scope": "raku",
		"prefix": "meth",
		"body": [
			"method ${1:name}(${2:parameters}) {",
			"\t${3:body};",
			"}",
			"$0"
		],
		"description": "method"
	},
	
	"Multi Subroutines": {
		"scope": "raku",
		"prefix": "multi",
		"body": [
			"multi ${1:subroutine_name}(${2:parameters}) {",
			"\t${3:body};",
			"}",
			"$0"		
		],
		"description": "multi subroutines"
	},
	
	"Given": {
		"scope": "raku",
		"prefix": "given",
		"body": [
			"given $1 {",
			"\twhen $2 {$3}",
			"\twhen $4 {$5}",
			"\tdefault {$6}",
			"}",
			"$0"		
		],
		"description": "given statement"
	},
	
	"Loop": {
		"scope": "raku",
		"prefix": "loop",
		"body": [
			"loop (${1:initializer}; ${2:conditional}; ${3:incrementer}) {",
			"\t${4:block};",
			"}",
			"$0"		
		],
		"description": "loop statement"
	},
	
	
	"Grammar": {
		"scope": "raku",
		"prefix": "gram",
		"body": [
			"grammar $1 {",
			"\ttoken TOP {$2}",
			"\t$3",
			"}",
			"$0"		
		],
		"description": "Creating grammar"
	},
	
	"Token": {
		"scope": "raku",
		"prefix": "token",
		"body": [
			"token $1 {$2}",
			"$0"		
		],
		"description": "token"
	},
	
	"Rolegrammar": {
		"scope": "raku",
		"prefix": "role",
		"body": [
			"role ${1:rolename} {",
			"\t${2:attributes_and_methods}",
			"}",
			"$0"		
		],
		"description": "role grammar"
	},
	
	"Rulegrammar": {
		"scope": "raku",
		"prefix": "rule",
		"body": [
			"rule ${1:name} {${2:body}}",
			"$0"		
		],
		"description": "rule"
	},
	
	"Regex": {
		"scope": "raku",
		"prefix": "regex",
		"body": [
			"my regex ${1:name} {",
			"\t$2",
			"}",
			"$0"		
		],
		"description": "regex"
	},
	
	"Main function": {
		"scope": "raku",
		"prefix": "main",
		"body": [
			"sub MAIN(${1:parameters}) {",
			"\t${2:body};",
			"}",
			"$0"		
		],
		"description": "MAIN function"
	},
	
	"NativeCall1": {
		"scope": "raku",
		"prefix": "natic",
		"body": [
			"use NativeCall;",
			"$0"
		],
		"description": "use NativeCall in your code"
	},
	
	
	"NativeCall2": {
		"scope": "raku",
		"prefix": "naticf",
		"body": [
			"sub ${1:function_name}(${2:parameters}) returns ${3:return_type}",
			"\tis native(\"${4:shared_library}\") { * };",
			"$0"
		],
		"description": "Simple nativecall function definition in NativeCall"
	},
	
	
	"NativeCall3": {
		"scope": "raku",
		"prefix": "naticfs",
		"body": [
			"sub ${1:function_name}(${2:argument_types}) returns ${3:return_type}",
			"\tis native(\"${4:shared_library}\")",
			"\tis symbol('${5:name_of_function_inside_shared_library}') { * };",
			"$0"
		],
		"description": "Call nativecall while specifying the name of the native routine in your library "
	}	
	
}
	
