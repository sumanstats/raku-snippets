# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.raku':

    'Header':
      'prefix': 'header',
      'body':
        """
        #======================================================#
        # Author: Dr Suman Khanal
        # Date creation: $CURRENT_DAY_NAME $CURRENT_MONTH_NAME_SHORT $CURRENT_DATE $CURRENT_YEAR, $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND
        # ~: ${1:Description}
        # File: $TM_FILENAME
        #======================================================#
        $0

        """


    'Single line comment':
      'prefix': 'slcom',
      'body':
        """
        # $1
        """
    'Multi line comment':
      'prefix': 'mlcom',
      'body':
        """
        #`[
        $1
        ]
        $2
        """

    'New variable':
      'prefix': 'var',
      'body':
        """
        my ${1:name} = ${2:value};
        $3
        """

    'Say':
      'prefix': 'say',
      'body':
        """
        say $1;
        $2
        """

    'Print':
      'prefix': 'print',
      'body':
        """
        print $1;
        $2
        """


    'For loop':
      'prefix': 'for',
      'body':
        """
        for ${1:iterable} {
          ${2:block};
        }
        $3
        """

    'For loop with when body':
      'prefix': 'forwhen',
      'body':
        """
        for $1 {
          when $2 {$3}
          when $4 {$5}
          default {$6}
        }
        $7
        """

    'Forp loop':
      'prefix': 'forp',
      'body':
        """
        for $1 -> $2 {
          ${3:block}
        }
        $4
        """

    'Conditional1':
      'prefix': 'if',
      'body':
        """
        if ${1:condition} {
          ${2:block};
        } $3
        """


    'Conditional2':
      'prefix': 'elsif',
      'body':
        """
        elsif ${1:condition} {
          ${2:block};
        } $3
        """


    'Conditional3':
      'prefix': 'else',
      'body':
        """
        else {
          ${1:block};
        };
        $2
        """

    'While':
      'prefix': 'while',
      'body':
        """
        while ${1:condition} {
          ${2:block of code};
        }
        $3
        """

    'Function':
      'prefix': 'sub',
      'body':
        """
        sub ${1:name}(${2:parameters}) {
          ${3:body};
        }
        $4
        """

    'Function2':
      'prefix': 'subexp',
      'body':
        """
        sub ${1:name}(${2:parameters}) is export {
          ${3:body};
        }
        $4
        """


    'Class':
      'prefix': 'cls',
      'body':
        """
        class ${1:name} {
          has ${2:attribute};
          has ${3:attribute};
          method ${4:behavior}(${5:parameters}) {
            ${6:body};
          }$7
        }
        $8
        """

    'Method':
      'prefix': 'meth',
      'body':
        """
        method ${1:name}(${2:parameters}) {
          ${3:body};
        }
        $4
        """

    'Multi Subroutines':
      'prefix': 'multi',
      'body':
        """
        multi ${1:subroutine_name}(${2:parameters}) {
          ${3:body};
        }
        $4
        """

    'Given':
      'prefix': 'given',
      'body':
        """
        given $1 {
          when $2 {$3}
          when $4 {$5}
          default {$6}
        }
        $7
        """

    'Loop':
      'prefix': 'loop',
      'body':
        """
        loop (${1:initializer}; ${2:conditional}; ${3:incrementer}) {
          ${4:block};
        }
        $5
        """

    'Grammar':
      'prefix': 'gram',
      'body':
        """
        grammar $1 {
          token TOP {$2}
          $3
        }
        $4
        """

    'Token':
      'prefix': 'token',
      'body':
        """
        token $1 {$2}
        $3
        """

    'Rolegrammar':
      'prefix': 'role',
      'body':
        """
        role ${1:rolename} {
          ${2:attributes_and_methods}
        }
        $3
        """

    'Rulegrammar':
      'prefix': 'rule',
      'body':
        """
        rule ${1:name} {${2:body}}
        $3
        """

    'Regex':
      'prefix': 'regex',
      'body':
        """
        my regex ${1:name} {
          $2
        }
        $3
        """

    'Main function':
      'prefix': 'main',
      'body':
        """
        sub MAIN(${1:parameters}) {
          ${2:body};
        }
        $3
        """

    'NativeCall1':
      'prefix': 'natic',
      'body':
        """
        use NativeCall;
        $1
        """

    'NativeCall2':
      'prefix': 'naticf',
      'body':
        """
        sub ${1:function_name}(${2:parameters}) returns ${3:return_type}
          is native(\"${4:shared_library}\") { * };
        $5
        """

    'NativeCall3':
      'prefix': 'naticfs',
      'body':
        """
        sub ${1:function_name}(${2:parameters}) returns ${3:return_type}
          is native(\"${4:shared_library}\")
          is symbol('${5:name_of_function_inside_shared_library}') { * };
        $6
        """
